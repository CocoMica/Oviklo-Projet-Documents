from datetime import datetime

global Backup_File_Name
def Sort_To_Pellets(element):
    if element != None:
        responseArray = []
        totalBoxes = int(element[6])
        remainingBoxes = totalBoxes
        print(element)
        userInput = 0
        while userInput != 'Done':
            userInput = input('Num Box Qty Remaining = '+ str(remainingBoxes)+' out of '+str(totalBoxes)+'. Create a new pellet? If yes enter num boxes in new pallet: ')
            try:
                pelletBoxQty = int(userInput)
                remainingBoxes = remainingBoxes - pelletBoxQty
                if remainingBoxes <=0:
                    pelletBoxQty  =  pelletBoxQty + remainingBoxes
                    userInput = 'Done'

                semiElement = element.copy()
                semiElement.append(pelletBoxQty)
                responseArray.append(semiElement)

            except:
                print('Function Sort_To_Pellets: invalid character')
        print('getting user input is over')
        return responseArray
    else:
        return None


def Decode_Barcode_Data():
    barcodeInput = input('Scan the barcode now: ')
    barcodeInputDecoded = barcodeInput.split('_')
    if len(barcodeInputDecoded) == 4:
        PONumber = barcodeInputDecoded[0]
        Excel01Row = barcodeInputDecoded[1]
        PelletNumber = barcodeInputDecoded[2]
        IdenticalLabelIssueNumber = barcodeInputDecoded[3]
        print("PO number: ", PONumber, " Excel 01 row: ", Excel01Row, " Pellet Number: ", PelletNumber,
              " Identical Label Issue Number: ", IdenticalLabelIssueNumber)
        return barcodeInputDecoded
    else:
        print ('Function Decode_Barcode_Data: Invalid barcode.')
        return None

def Generate_Backup_Data():
    global Backup_File_Name
    U_id = str(datetime.today().year)+"-"+str(datetime.today().month)+"-"+str(datetime.today().day) + \
        "-"+str(datetime.today().hour)+"-" + \
        str(datetime.today().minute)+"-"+str(datetime.today().second)
    Backup_File_Name = "Output_files/Backup_Files/"+U_id+".txt"
    #print("Backup File Name:", Backup_File_Name)
    Write_Heading_Of_text_Doc("Rec. type", "EPF", "Barcode", "PONum", "Excel01row", "PelletNum",
                             "LabelIssueNum", "Supplier", "MaterialDesc", "MaterialC", "LotNum", "InvoiceNum",
                             "TotIniBoxQty", "BoxQtyInPellet", "BoxQtyRemoved", "NewBoxQty")


def Write_To_Backup_text_Doc(TypeOfRecord, DataEnteredBy,OverallBarcode, PONumber, Excel01Row, PelletNumber, LabelIssueNumber, Supplier, MaterialDescription,MaterialCode, LotNumber, InvoiceNumber, TotalInitialBoxQty,BoxQtyInPelletBeforeScanning, BoxQuantityRemoved, NewBoxQtyInPellet):
    global Backup_File_Name
    global Backup_File
    try:
        Backup_File = open(Backup_File_Name, "a+")
        Date = str(datetime.today().year)+"-" + \
            str(datetime.today().month)+"-"+str(datetime.today().day)
        Time = str(datetime.today().hour)+"-" + \
            str(datetime.today().minute)+"-"+str(datetime.today().second)

        Backup_File.write(Date+"\t"+Time+"\t"+str(TypeOfRecord)+"\t"+str(DataEnteredBy)+"\t"+str(OverallBarcode) +"\t"+str(PONumber)+"\t"+str(Excel01Row)+"\t"+str(PelletNumber)+"\t"+str(LabelIssueNumber)+"\t"+str(Supplier)+"\t"+str(MaterialDescription)+"\t"+str(MaterialCode)+"\t"+str(LotNumber)+"\t"+str(InvoiceNumber)+"\t"+str(TotalInitialBoxQty)+"\t"+str(BoxQtyInPelletBeforeScanning)+"\t"+str(BoxQuantityRemoved)+"\t"+str(NewBoxQtyInPellet)+"\t"+"\n")
        Backup_File.close()
        return True
    except Exception as E:
        print("function Write_To_Backup_text_Doc: Failed to write information to backup file.", E)
        return False

def Write_Heading_Of_text_Doc(TypeOfRecord, DataEnteredBy,OverallBarcode, PONumber, Excel01Row, PelletNumber, LabelIssueNumber, Supplier, MaterialDescription,MaterialCode, LotNumber, InvoiceNumber, TotalInitialBoxQty,BoxQtyInPelletBeforeScanning, BoxQuantityRemoved, NewBoxQtyInPellet):
    global Backup_File_Name
    global Backup_File
    try:
        Backup_File = open(Backup_File_Name, "a+")
        Backup_File.write(str(TypeOfRecord)+"\t"+str(DataEnteredBy)+"\t"+str(OverallBarcode) +"\t"+str(PONumber)+"\t"+str(Excel01Row)+"\t"+str(PelletNumber)+"\t"+str(LabelIssueNumber)+"\t"+str(Supplier)+"\t"+str(MaterialDescription)+"\t"+str(MaterialCode)+"\t"+str(LotNumber)+"\t"+str(InvoiceNumber)+"\t"+str(TotalInitialBoxQty)+"\t"+str(BoxQtyInPelletBeforeScanning)+"\t"+str(BoxQuantityRemoved)+"\t"+str(NewBoxQtyInPellet)+"\t"+"\n")
        Backup_File.close()
    except Exception as E:
        print("function Write_To_Backup_text_Doc: Failed to write information to backup file.", E)